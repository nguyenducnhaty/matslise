#include <functional>
#include <Eigen/Dense>
#include "matscs.h"
#include "legendre.h"
#include "calculateEta.h"

#define EPS (1.e-12)

using namespace matscs;

Matscs::Matscs(std::function<MatrixXd(double)> V, int n, double xmin, double xmax, int sectorCount)
        : V(V), n(n), xmin(xmin), xmax(xmax), sectorCount(sectorCount) {
    sectors = new Sector *[sectorCount];
    double h = (xmax - xmin) / sectorCount;
    for (int i = 0; i < sectorCount; ++i)
        sectors[i] = new Sector(this, xmin + i * h, xmin + (i + 1) * h);

}

matscs::Y Matscs::propagate(const double E, const matscs::Y &_y, const double a, const double b) const {
    Y y = _y;
    if (a < b) {
        for (int i = 0; i < sectorCount; ++i) {
            Sector *sector = sectors[i];
            if (sector->xmax > a) {
                if (sector->xmin < a) // eerste
                    y = sector->calculateT(E, a - sector->xmin) / y;

                if (sector->xmax > b) { // laatste
                    y = sector->calculateT(E, b - sector->xmin) * y;
                    break;
                }

                y = sector->calculateT(E) * y;
            }
        }
    } else {
        for (int i = sectorCount - 1; i >= 0; --i) {
            Sector *sector = sectors[i];
            if (sector->xmin < a) {
                if (sector->xmax > a) // eerste
                    y = sector->calculateT(E, a - sector->xmin) / y;
                else
                    y = sector->calculateT(E) / y;

                if (sector->xmin < b) { // laatste
                    y = sector->calculateT(E, b - sector->xmin) * y;
                    break;
                }

            }
        }
    }
    return y;

}

Matscs::~Matscs() {
    for (int i = 0; i < sectorCount; ++i)
        delete sectors[i];
    delete[] sectors;
}

std::vector<matscs::Y> *Matscs::computeEigenfunction(double E, std::vector<double> &x) const {
    std::sort(x.begin(), x.end());
    std::vector<Y> *ys = new std::vector<Y>();

    auto iterator = x.begin();

    while (iterator != x.end() && *iterator < xmin - EPS)
        iterator = x.erase(iterator);

    Sector *sector;
    Y y(MatrixXd::Zero(n, n), MatrixXd::Identity(n, n));
    for (int i = 0; iterator != x.end(); ++iterator) {
        while ((sector = sectors[i])->xmax < *iterator) {
            y = sector->calculateT(E) * y;
            ++i;
            if (i >= sectorCount)
                break;
        }

        ys->push_back(sector->calculateT(E, *iterator - sector->xmin) * y);
    }
    while (iterator != x.end() && *iterator > xmax + EPS)
        iterator = x.erase(iterator);

    return ys;
}

Sector::Sector(const Matscs *s, double xmin, double xmax) : s(s), xmin(xmin), xmax(xmax) {
    h = xmax - xmin;
    vs = legendre::getCoefficients(MATSCS_LEGENDRE, s->V, xmin, xmax);
    SelfAdjointEigenSolver<MatrixXd> es(vs[0]);
    D = es.eigenvectors();

    vs[0] = es.eigenvalues().asDiagonal();
    for (int i = 1; i < MATSCS_LEGENDRE; ++i)
        vs[i] = D * vs[i] * D.transpose();

    calculateTCoeffs();
}

void Sector::calculateTCoeffs() {
    MatrixXd zero = MatrixXd::Zero(s->n, s->n);
    MatrixXd I = MatrixXd::Identity(s->n, s->n);
    MatrixXd &v1 = vs[1],
            &v2 = vs[2],
            &v3 = vs[3],
            &v4 = vs[4],
            &v5 = vs[5];

    // @formatter:off
    u = {(I), zero, zero, zero, zero, zero, zero, zero, zero, zero,      zero, zero, ((((-0.5*v1))+(((0.5*v2))+(((-0.5*v3))+(((0.5*v4))+((-0.5*v5))*h)*h)*h)*h)*h), (((0.5*v1))+(((-1.5*v2))+(((3.0*v3))+(((-5.0*v4))+((7.5*v5))*h)*h)*h)*h), ((v2)+(((-5.0*v3))+(((15.0*v4))+((-35.0*v5))*h)*h)*h), (((2.5*v3))+(((-17.5*v4))+((70.0*v5))*h)*h), (((7.0*v4))+((-63.0*v5))*h), ((21.0*v5)), zero, zero,      zero, zero, zero, (((-0.5*v1))+(((1.5*v2))+(((-3.0*v3))+(((5.0*v4))+((-7.5*v5))*h)*h)*h)*h), (((-1.5*v2))+(((7.5*v3))+(((-22.5*v4)+(0.125*(v1*v1)))+(((-0.125*(v2*v1))+(52.5*v5)+(-0.125*(v1*v2)))+(((0.125*(v3*v1))+(0.125*(v1*v3))+(0.125*(v2*v2)))+((-0.125*(v4*v1))+(-0.125*(v1*v4))+(-0.125*(v2*v3))+(-0.125*(v3*v2)))*h)*h)*h)*h)*h), (((-5.0*v3))+(((35.0*v4)+(-0.25*(v1*v1)))+(((0.5833333333333334*(v2*v1))+(-140.0*v5)+(0.4166666666666667*(v1*v2)))+(((-1.0833333333333333*(v3*v1))+(-0.6666666666666666*(v1*v3))+(-0.75*(v2*v2)))+((1.75*(v4*v1))+(v1*v4)+(v2*v3)+(1.25*(v3*v2)))*h)*h)*h)*h), (((-17.5*v4)+(0.125*(v1*v1)))+(((-0.75*(v2*v1))+(157.5*v5)+(-0.5*(v1*v2)))+(((2.625*(v3*v1))+(1.375*(v1*v3))+(1.625*(v2*v2)))+((-6.875*(v4*v1))+(-3.125*(v1*v4))+(-3.25*(v2*v3))+(-4.25*(v3*v2)))*h)*h)*h), (((0.3*(v2*v1))+(-63.0*v5)+(0.2*(v1*v2)))+(((-2.5*(v3*v1))+(-1.25*(v1*v3))+(-1.5*(v2*v2)))+((11.5*(v4*v1))+(4.75*(v1*v4))+(5.05*(v2*v3))+(6.7*(v3*v2)))*h)*h), (((0.8333333333333334*(v3*v1))+(0.4166666666666667*(v1*v3))+(0.5*(v2*v2)))+((-8.75*(v4*v1))+(-3.5*(v1*v4))+(-3.75*(v2*v3))+(-5.0*(v3*v2)))*h), ((2.5*(v4*v1))+(v1*v4)+(1.0714285714285714*(v2*v3))+(1.4285714285714286*(v3*v2))),      zero, zero, zero, zero, zero, (((2.5*v3))+(((-17.5*v4)+(0.25*(v1*v1)))+(((-0.4166666666666667*(v2*v1))+(70.0*v5)+(-0.5833333333333334*(v1*v2)))+(((0.6666666666666666*(v3*v1))+(1.0833333333333333*(v1*v3))+(0.75*(v2*v2)))+((-1.0*(v4*v1))+(-1.75*(v1*v4))+(-1.25*(v2*v3))+(-1.0*(v3*v2)))*h)*h)*h)*h), (((17.5*v4)+(-0.2916666666666667*(v1*v1)))+(((1.25*(v2*v1))+(-157.5*v5)+(1.25*(v1*v2)))+(((-3.625*(v3*v1))+(-3.625*(v1*v3))+(-3.375*(v2*v2)))+((8.541666666666666*(v4*v1))+(8.541666666666666*(v1*v4))+(7.5*(v2*v3))+(-0.020833333333333332*(v1*v1*v1))+(7.5*(v3*v2)))*h)*h)*h), (((-0.825*(v2*v1))+(94.5*v5)+(-0.675*(v1*v2)))+(((5.625*(v3*v1))+(4.375*(v1*v3))+(4.5*(v2*v2)))+((-22.875*(v4*v1))+(-17.125*(v1*v4))+(-16.075*(v2*v3))+(0.0625*(v1*v1*v1))+(-17.925*(v3*v2)))*h)*h), (((-2.6666666666666665*(v3*v1))+(-1.8333333333333333*(v1*v3))+(-1.9*(v2*v2)))+((24.5*(v4*v1))+(15.75*(v1*v4))+(15.0*(v2*v3))+(-0.0625*(v1*v1*v1))+(17.5*(v3*v2)))*h), ((-9.166666666666666*(v4*v1))+(-5.416666666666667*(v1*v4))+(-5.178571428571429*(v2*v3))+(0.020833333333333332*(v1*v1*v1))+(-6.071428571428571*(v3*v2)))};
    up = {zero, zero, zero, zero, zero, zero, zero, zero, zero, zero,      zero, ((((-0.5*v1))+(((0.5*v2))+(((-0.5*v3))+(((0.5*v4))+((-0.5*v5))*h)*h)*h)*h)*h), (((0.5*v1))+(((-1.5*v2))+(((3.0*v3))+(((-5.0*v4))+((7.5*v5))*h)*h)*h)*h), (((1.5*v2))+(((-7.5*v3))+(((22.5*v4)+(0.125*(v1*v1)))+(((-0.125*(v2*v1))+(-52.5*v5)+(-0.125*(v1*v2)))+(((0.125*(v3*v1))+(0.125*(v1*v3))+(0.125*(v2*v2)))+(((-0.125*(v4*v1))+(-0.125*(v1*v4))+(-0.125*(v2*v3))+(-0.125*(v3*v2)))+((0.125*(v1*v5))+(0.125*(v5*v1))+(0.125*(v4*v2))+(0.125*(v2*v4))+(0.125*(v3*v3)))*h)*h)*h)*h)*h)*h), (((5.0*v3))+(((-35.0*v4)+(-0.25*(v1*v1)))+(((0.5833333333333334*(v2*v1))+(140.0*v5)+(0.4166666666666667*(v1*v2)))+(((-1.0833333333333333*(v3*v1))+(-0.6666666666666666*(v1*v3))+(-0.75*(v2*v2)))+(((1.75*(v4*v1))+(v1*v4)+(v2*v3)+(1.25*(v3*v2)))+((-1.4166666666666667*(v1*v5))+(-2.5833333333333335*(v5*v1))+(-1.9166666666666667*(v4*v2))+(-1.3333333333333333*(v2*v4))+(-1.5*(v3*v3)))*h)*h)*h)*h)*h), (((17.5*v4)+(0.125*(v1*v1)))+(((-0.75*(v2*v1))+(-157.5*v5)+(-0.5*(v1*v2)))+(((2.625*(v3*v1))+(1.375*(v1*v3))+(1.625*(v2*v2)))+(((-6.875*(v4*v1))+(-3.125*(v1*v4))+(-3.25*(v2*v3))+(-4.25*(v3*v2)))+((6.25*(v1*v5))+(15.0*(v5*v1))+(9.5*(v4*v2))+(6.0*(v2*v4))+(7.0*(v3*v3)))*h)*h)*h)*h), (((0.3*(v2*v1))+(63.0*v5)+(0.2*(v1*v2)))+(((-2.5*(v3*v1))+(-1.25*(v1*v3))+(-1.5*(v2*v2)))+(((11.5*(v4*v1))+(4.75*(v1*v4))+(5.05*(v2*v3))+(6.7*(v3*v2)))+((-14.0*(v1*v5))+(-38.5*(v5*v1))+(-22.5*(v4*v2))+(-13.75*(v2*v4))+(-16.25*(v3*v3)))*h)*h)*h), (((0.8333333333333334*(v3*v1))+(0.4166666666666667*(v1*v3))+(0.5*(v2*v2)))+(((-8.75*(v4*v1))+(-3.5*(v1*v4))+(-3.75*(v2*v3))+(-5.0*(v3*v2)))+((16.916666666666668*(v1*v5))+(49.583333333333336*(v5*v1))+(27.916666666666668*(v4*v2))+(16.833333333333332*(v2*v4))+(20.0*(v3*v3)))*h)*h), (((2.5*(v4*v1))+(v1*v4)+(1.0714285714285714*(v2*v3))+(1.4285714285714286*(v3*v2)))+((-10.5*(v1*v5))+(-31.5*(v5*v1))+(-17.5*(v4*v2))+(-10.5*(v2*v4))+(-12.5*(v3*v3)))*h), ((2.625*(v1*v5))+(7.875*(v5*v1))+(4.375*(v4*v2))+(2.625*(v2*v4))+(3.125*(v3*v3))),      zero, zero, zero, (((-1.5*v2))+(((7.5*v3))+(((-22.5*v4)+(0.125*(v1*v1)))+(((-0.125*(v2*v1))+(52.5*v5)+(-0.125*(v1*v2)))+(((0.125*(v3*v1))+(0.125*(v1*v3))+(0.125*(v2*v2)))+(((-0.125*(v4*v1))+(-0.125*(v1*v4))+(-0.125*(v2*v3))+(-0.125*(v3*v2)))+((0.125*(v1*v5))+(0.125*(v5*v1))+(0.125*(v4*v2))+(0.125*(v2*v4))+(0.125*(v3*v3)))*h)*h)*h)*h)*h)*h), (((-7.5*v3))+(((52.5*v4)+(-0.25*(v1*v1)))+(((0.75*(v2*v1))+(-210.0*v5)+(0.25*(v1*v2)))+(((-1.5*(v3*v1))+(-0.25*(v1*v3))+(-0.75*(v2*v2)))+(((2.5*(v4*v1))+(0.25*(v1*v4))+(0.75*(v2*v3))+(1.5*(v3*v2)))+((-0.25*(v1*v5))+(-3.75*(v5*v1))+(-2.5*(v4*v2))+(-0.75*(v2*v4))+(-1.5*(v3*v3)))*h)*h)*h)*h)*h), (((-35.0*v4)+(0.08333333333333333*(v1*v1)))+(((-1.0*(v2*v1))+(315.0*v5)+(-0.25*(v1*v2)))+(((4.25*(v3*v1))+(0.5*(v1*v3))+(1.5*(v2*v2)))+(((-12.083333333333334*(v4*v1))+(-0.8333333333333334*(v1*v4))+(-2.25*(v2*v3))+(-0.020833333333333332*(v1*v1*v1))+(-5.25*(v3*v2)))+((1.25*(v1*v5))+(0.020833333333333332*(v1*v1*v2))+(27.5*(v5*v1))+(0.020833333333333332*(v2*v1*v1))+(13.75*(v4*v2))+(3.25*(v2*v4))+(6.75*(v3*v3))+(0.020833333333333332*(v1*v2*v1)))*h)*h)*h)*h), (((0.375*(v2*v1))+(-157.5*v5)+(0.125*(v1*v2)))+(((-4.375*(v3*v1))+(-0.625*(v1*v3))+(-1.5*(v2*v2)))+(((23.125*(v4*v1))+(1.875*(v1*v4))+(4.125*(v2*v3))+(0.0625*(v1*v1*v1))+(8.875*(v3*v2)))+((-4.375*(v1*v5))+(-0.08333333333333333*(v1*v1*v2))+(-83.125*(v5*v1))+(-0.125*(v2*v1*v1))+(-35.625*(v4*v2))+(-9.375*(v2*v4))+(-17.5*(v3*v3))+(-0.10416666666666667*(v1*v2*v1)))*h)*h)*h), (((1.5*(v3*v1))+(0.25*(v1*v3))+(0.6*(v2*v2)))+(((-19.25*(v4*v1))+(-1.75*(v1*v4))+(-3.75*(v2*v3))+(-0.0625*(v1*v1*v1))+(-7.5*(v3*v2)))+((7.0*(v1*v5))+(0.13333333333333333*(v1*v1*v2))+(120.75*(v5*v1))+(0.2375*(v2*v1*v1))+(49.25*(v4*v2))+(14.25*(v2*v4))+(25.5*(v3*v3))+(0.19166666666666668*(v1*v2*v1)))*h)*h), (((5.833333333333333*(v4*v1))+(0.5833333333333334*(v1*v4))+(1.25*(v2*v3))+(0.020833333333333332*(v1*v1*v1))+(2.5*(v3*v2)))+((-5.25*(v1*v5))+(-0.1*(v1*v1*v2))+(-84.0*(v5*v1))+(-0.1875*(v2*v1*v1))+(-35.0*(v4*v2))+(-10.5*(v2*v4))+(-18.75*(v3*v3))+(-0.15*(v1*v2*v1)))*h), ((1.5*(v1*v5))+(0.02857142857142857*(v1*v1*v2))+(22.5*(v5*v1))+(0.05357142857142857*(v2*v1*v1))+(10.0*(v4*v2))+(3.0*(v2*v4))+(5.357142857142857*(v3*v3))+(0.04285714285714286*(v1*v2*v1))),      zero, zero, zero, zero, zero, (((17.5*v4)+(-0.2916666666666667*(v1*v1)))+(((1.25*(v2*v1))+(-157.5*v5)+(1.25*(v1*v2)))+(((-3.625*(v3*v1))+(-3.625*(v1*v3))+(-3.375*(v2*v2)))+(((8.541666666666666*(v4*v1))+(8.541666666666666*(v1*v4))+(7.5*(v2*v3))+(-0.020833333333333332*(v1*v1*v1))+(7.5*(v3*v2)))+((-17.5*(v1*v5))+(0.020833333333333332*(v1*v1*v2))+(-17.5*(v5*v1))+(0.020833333333333332*(v2*v1*v1))+(-14.75*(v4*v2))+(-14.75*(v2*v4))+(-14.25*(v3*v3))+(0.020833333333333332*(v1*v2*v1)))*h)*h)*h)*h), (((-1.375*(v2*v1))+(157.5*v5)+(-1.125*(v1*v2)))+(((9.375*(v3*v1))+(6.875*(v1*v3))+(7.5*(v2*v2)))+(((-38.125*(v4*v1))+(-25.625*(v1*v4))+(-26.375*(v2*v3))+(0.0625*(v1*v1*v1))+(-29.875*(v3*v2)))+((74.375*(v1*v5))+(-0.041666666666666664*(v1*v1*v2))+(118.125*(v5*v1))+(-0.16666666666666666*(v2*v1*v1))+(90.625*(v4*v2))+(73.125*(v2*v4))+(78.75*(v3*v3))+(-0.10416666666666667*(v1*v2*v1)))*h)*h)*h), (((-6.0*(v3*v1))+(-3.5*(v1*v3))+(-4.275*(v2*v2)))+(((55.125*(v4*v1))+(28.875*(v1*v4))+(31.875*(v2*v3))+(-0.041666666666666664*(v1*v1*v1))+(39.375*(v3*v2)))+((-137.375*(v1*v5))+(-0.0020833333333333333*(v1*v1*v2))+(-286.125*(v5*v1))+(0.3104166666666667*(v2*v1*v1))+(-203.25*(v4*v2))+(-142.0*(v2*v4))+(-163.875*(v3*v3))+(0.17083333333333334*(v1*v2*v1)))*h)*h), (((-25.666666666666668*(v4*v1))+(-11.666666666666666*(v1*v4))+(-13.0*(v2*v3))+(-17.0*(v3*v2)))+((120.75*(v1*v5))+(0.0375*(v1*v1*v2))+(294.0*(v5*v1))+(-0.2*(v2*v1*v1))+(196.0*(v4*v2))+(126.0*(v2*v4))+(150.0*(v3*v3))+(-0.0875*(v1*v2*v1)))*h), ((-40.5*(v1*v5))+(-0.017261904761904763*(v1*v1*v2))+(-108.75*(v5*v1))+(0.03273809523809524*(v2*v1*v1))+(-68.75*(v4*v2))+(-42.5*(v2*v4))+(-50.892857142857146*(v3*v3))+(0.005357142857142857*(v1*v2*v1)))};
    v = {zero, zero, zero, zero, zero, zero, zero, zero, zero, zero,      zero, I, zero, zero, zero, zero, zero, zero, zero, zero,      zero, zero, zero, ((((-0.5*v1))+(((0.5*v2))+(((-0.5*v3))+(((0.5*v4))+((-0.5*v5))*h)*h)*h)*h)*h), (((0.5*v1))+(((-1.5*v2))+(((3.0*v3))+(((-5.0*v4))+((7.5*v5))*h)*h)*h)*h), ((v2)+(((-5.0*v3))+(((15.0*v4))+((-35.0*v5))*h)*h)*h), (((2.5*v3))+(((-17.5*v4))+((70.0*v5))*h)*h), (((7.0*v4))+((-63.0*v5))*h), ((21.0*v5)), zero,      zero, zero, zero, zero, zero, (((-0.5*v2))+(((2.5*v3))+(((-7.5*v4)+(0.125*(v1*v1)))+(((-0.125*(v2*v1))+(17.5*v5)+(-0.125*(v1*v2)))+((0.125*(v3*v1))+(0.125*(v1*v3))+(0.125*(v2*v2)))*h)*h)*h)*h), (((-2.5*v3))+(((17.5*v4)+(-0.25*(v1*v1)))+(((0.5833333333333334*(v2*v1))+(-70.0*v5)+(0.4166666666666667*(v1*v2)))+((-1.0833333333333333*(v3*v1))+(-0.6666666666666666*(v1*v3))+(-0.75*(v2*v2)))*h)*h)*h), (((-10.5*v4)+(0.125*(v1*v1)))+(((-0.75*(v2*v1))+(94.5*v5)+(-0.5*(v1*v2)))+((2.625*(v3*v1))+(1.375*(v1*v3))+(1.625*(v2*v2)))*h)*h), (((0.3*(v2*v1))+(-42.0*v5)+(0.2*(v1*v2)))+((-2.5*(v3*v1))+(-1.25*(v1*v3))+(-1.5*(v2*v2)))*h), ((0.8333333333333334*(v3*v1))+(0.4166666666666667*(v1*v3))+(0.5*(v2*v2)))};
    vp = {(I), zero, zero, zero, zero, zero, zero, zero, zero, zero,      zero, zero, ((((-0.5*v1))+(((0.5*v2))+(((-0.5*v3))+(((0.5*v4))+((-0.5*v5))*h)*h)*h)*h)*h), (((0.5*v1))+(((-1.5*v2))+(((3.0*v3))+(((-5.0*v4))+((7.5*v5))*h)*h)*h)*h), ((v2)+(((-5.0*v3))+(((15.0*v4))+((-35.0*v5))*h)*h)*h), (((2.5*v3))+(((-17.5*v4))+((70.0*v5))*h)*h), (((7.0*v4))+((-63.0*v5))*h), ((21.0*v5)), zero, zero,      zero, zero, zero, (((0.5*v1))+(((-1.5*v2))+(((3.0*v3))+(((-5.0*v4))+((7.5*v5))*h)*h)*h)*h), (((1.5*v2))+(((-7.5*v3))+(((22.5*v4)+(0.125*(v1*v1)))+(((-0.125*(v2*v1))+(-52.5*v5)+(-0.125*(v1*v2)))+(((0.125*(v3*v1))+(0.125*(v1*v3))+(0.125*(v2*v2)))+((-0.125*(v4*v1))+(-0.125*(v1*v4))+(-0.125*(v2*v3))+(-0.125*(v3*v2)))*h)*h)*h)*h)*h), (((5.0*v3))+(((-35.0*v4)+(-0.25*(v1*v1)))+(((0.5833333333333334*(v2*v1))+(140.0*v5)+(0.4166666666666667*(v1*v2)))+(((-1.0833333333333333*(v3*v1))+(-0.6666666666666666*(v1*v3))+(-0.75*(v2*v2)))+((1.75*(v4*v1))+(v1*v4)+(v2*v3)+(1.25*(v3*v2)))*h)*h)*h)*h), (((17.5*v4)+(0.125*(v1*v1)))+(((-0.75*(v2*v1))+(-157.5*v5)+(-0.5*(v1*v2)))+(((2.625*(v3*v1))+(1.375*(v1*v3))+(1.625*(v2*v2)))+((-6.875*(v4*v1))+(-3.125*(v1*v4))+(-3.25*(v2*v3))+(-4.25*(v3*v2)))*h)*h)*h), (((0.3*(v2*v1))+(63.0*v5)+(0.2*(v1*v2)))+(((-2.5*(v3*v1))+(-1.25*(v1*v3))+(-1.5*(v2*v2)))+((11.5*(v4*v1))+(4.75*(v1*v4))+(5.05*(v2*v3))+(6.7*(v3*v2)))*h)*h), (((0.8333333333333334*(v3*v1))+(0.4166666666666667*(v1*v3))+(0.5*(v2*v2)))+((-8.75*(v4*v1))+(-3.5*(v1*v4))+(-3.75*(v2*v3))+(-5.0*(v3*v2)))*h), ((2.5*(v4*v1))+(v1*v4)+(1.0714285714285714*(v2*v3))+(1.4285714285714286*(v3*v2))),      zero, zero, zero, zero, zero, (((-2.5*v3))+(((17.5*v4)+(-0.25*(v1*v1)))+(((0.5833333333333334*(v2*v1))+(-70.0*v5)+(0.4166666666666667*(v1*v2)))+(((-1.0833333333333333*(v3*v1))+(-0.6666666666666666*(v1*v3))+(-0.75*(v2*v2)))+((1.75*(v4*v1))+(v1*v4)+(v2*v3)+(1.25*(v3*v2)))*h)*h)*h)*h), (((-17.5*v4)+(0.20833333333333334*(v1*v1)))+(((-1.25*(v2*v1))+(157.5*v5)+(-0.75*(v1*v2)))+(((4.375*(v3*v1))+(1.875*(v1*v3))+(2.625*(v2*v2)))+((-11.458333333333334*(v4*v1))+(-3.9583333333333335*(v1*v4))+(-5.0*(v2*v3))+(-0.020833333333333332*(v1*v1*v1))+(-7.0*(v3*v2)))*h)*h)*h), (((0.675*(v2*v1))+(-94.5*v5)+(0.325*(v1*v2)))+(((-5.625*(v3*v1))+(-1.875*(v1*v3))+(-3.0*(v2*v2)))+((25.875*(v4*v1))+(6.625*(v1*v4))+(9.175*(v2*v3))+(0.0625*(v1*v1*v1))+(14.325*(v3*v2)))*h)*h), (((2.3333333333333335*(v3*v1))+(0.6666666666666666*(v1*v3))+(1.1*(v2*v2)))+((-24.5*(v4*v1))+(-5.25*(v1*v4))+(-7.5*(v2*v3))+(-0.0625*(v1*v1*v1))+(-12.5*(v3*v2)))*h), ((8.333333333333334*(v4*v1))+(1.5833333333333333*(v1*v4))+(2.3214285714285716*(v2*v3))+(0.020833333333333332*(v1*v1*v1))+(3.9285714285714284*(v3*v2)))};
    // @formatter:on

    for (int i = 0; i < MATSCS_ETA; ++i) {
        hu[i] = hup[i] = hv[i] = hvp[i] = zero;
        double H = 1;
        for (int j = 0; j < MATSCS_HMAX; ++j, H *= h) {
            hu[i] += H * u[i][j];
            hup[i] += H * up[i][j];
            hv[i] += H * v[i][j];
            hvp[i] += H * vp[i][j];
        }
    }
}


T Sector::calculateT(double E, double delta) const {
    MatrixXd zero = MatrixXd::Zero(s->n, s->n);
    MatrixXd one = MatrixXd::Identity(s->n, s->n);

    if (fabs(delta) <= EPS)
        return T(one, zero, zero, one);
    if (fabs(delta - h) <= EPS)
        return calculateT(E);

    VectorXd VEd = (vs[0].diagonal() - VectorXd::Constant(s->n, E)) * delta;
    MatrixXd *eta = calculateEta(VEd * delta, s->n, MATSCS_ETA);
    T t(zero, eta[1] * VEd.asDiagonal(), zero, zero);

    for (int i = 0; i < MATSCS_ETA; ++i) {
        double dd = 1;
        for (int j = 0; j < MATSCS_HMAX; ++j, dd *= delta) {
            t.u += dd * eta[i] * u[i][j];
            t.up += dd * eta[i] * up[i][j];
            t.v += dd * eta[i] * v[i][j];
            t.vp += dd * eta[i] * vp[i][j];
        }
    }

    delete[] eta;

    t.u = D.transpose() * t.u * D;
    t.up = D.transpose() * t.up * D;
    t.v = D.transpose() * t.v * D;
    t.vp = D.transpose() * t.vp * D;
    return t;
}

T Sector::calculateT(double E) const {
    MatrixXd zero = MatrixXd::Zero(s->n, s->n);
    MatrixXd one = MatrixXd::Identity(s->n, s->n);

    VectorXd VEd = (vs[0].diagonal() - VectorXd::Constant(s->n, E)) * h;
    MatrixXd *eta = calculateEta(VEd * h, s->n, MATSCS_ETA);
    T t(zero, eta[1] * VEd.asDiagonal(), zero, zero);

    for (int i = 0; i < MATSCS_ETA; ++i) {
        t.u += hu[i] * eta[i];
        t.up += hup[i] * eta[i];
        t.v += hv[i] * eta[i];
        t.vp += hvp[i] * eta[i];
    }
    delete[] eta;

    t.u = D.transpose() * t.u * D;
    t.up = D.transpose() * t.up * D;
    t.v = D.transpose() * t.v * D;
    t.vp = D.transpose() * t.vp * D;

    return t;
}

Sector::~Sector() {
    delete[]vs;
}
