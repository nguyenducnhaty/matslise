#include "matscs_formulas.h"

void calculate_tcoeff_matrix(int n, double h, MatrixXd *vs, Array2D<Matrix2D<MatrixXd>, MATSCS_ETA_delta, MATSCS_HMAX_delta> &tDelta, Matrix2D<MatrixXd> *tH) {
    MatrixXd zero = MatrixXd::Zero(n, n);
    MatrixXd I = MatrixXd::Identity(n, n);
    MatrixXd &v0 = vs[0];
    MatrixXd &v1 = vs[1];
    MatrixXd &v2 = vs[2];
    MatrixXd &v3 = vs[3];
    MatrixXd &v4 = vs[4];
    MatrixXd &v5 = vs[5];
    MatrixXd &v6 = vs[6];
	MatrixXd v1_v0 = v1 * v0;
	MatrixXd v2_v1 = v2 * v1;
	MatrixXd v1_v2 = v1 * v2;
	MatrixXd v0_v2 = v0 * v2;
	MatrixXd v2_v0 = v2 * v0;
	MatrixXd v0_v1 = v0 * v1;
	MatrixXd v3_v0 = v3 * v0;
	MatrixXd v0_v3 = v0 * v3;
	MatrixXd v1_v1 = v1 * v1;
	MatrixXd v2_v2 = v2 * v2;
	MatrixXd v1_v3 = v1 * v3;
	MatrixXd v3_v1 = v3 * v1;
	MatrixXd v4_v0 = v4 * v0;
	MatrixXd v0_v4 = v0 * v4;
	MatrixXd v1_v0_v0 = v1_v0 * v0;
	MatrixXd v0_v1_v0 = v0 * v1_v0;
	MatrixXd v0_v0_v1 = v0 * v0_v1;
	MatrixXd v1_v0_v1 = v1_v0 * v1;
	MatrixXd v0_v0_v2 = v0 * v0_v2;
	MatrixXd v0_v1_v1 = v0_v1 * v1;
	MatrixXd v1_v1_v0 = v1 * v1_v0;
	MatrixXd v0_v2_v0 = v0_v2 * v0;
	MatrixXd v2_v0_v0 = v2_v0 * v0;
    tDelta[0][0] = {(I), zero, zero, (I)}; 
    MatrixXd tmp_poly_1 = (0.5*v4);
    tmp_poly_1 *= h;
    tmp_poly_1 += (-0.5*v3);
    tmp_poly_1 *= h;
    tmp_poly_1 += (0.5*v2);
    tmp_poly_1 *= h;
    tmp_poly_1 += (-0.5*v1);
    tmp_poly_1 *= h;
    tDelta[0][1] = {zero, zero, tmp_poly_1, zero}; 
    MatrixXd tmp_poly_2 = (-5.0*v4);
    tmp_poly_2 *= h;
    tmp_poly_2 += (3.0*v3);
    tmp_poly_2 *= h;
    tmp_poly_2 += (-1.5*v2);
    tmp_poly_2 *= h;
    tmp_poly_2 += (0.5*v1);
    tDelta[0][2] = {zero, zero, tmp_poly_2, zero}; 
    MatrixXd tmp_poly_3 = (15.0*v4);
    tmp_poly_3 *= h;
    tmp_poly_3 += (-5.0*v3);
    tmp_poly_3 *= h;
    tmp_poly_3 += v2;
    tDelta[0][3] = {zero, zero, tmp_poly_3, zero}; 
    MatrixXd tmp_poly_4 = (-17.5*v4);
    tmp_poly_4 *= h;
    tmp_poly_4 += (2.5*v3);
    tDelta[0][4] = {zero, zero, tmp_poly_4, zero}; 
    tDelta[0][5] = {zero, zero, ((7.0*v4)), zero}; 
    tDelta[0][6] = {zero, zero, zero, zero}; 
    tH[0] = {(I), zero, zero, (I)}; 
    tDelta[1][0] = {zero, zero, zero, zero}; 
    MatrixXd tmp_poly_5 = (0.5*v4);
    tmp_poly_5 *= h;
    tmp_poly_5 += (-0.5*v3);
    tmp_poly_5 *= h;
    tmp_poly_5 += (0.5*v2);
    tmp_poly_5 *= h;
    tmp_poly_5 += (-0.5*v1);
    tmp_poly_5 *= h;
    tDelta[1][1] = {zero, (I), tmp_poly_5, zero}; 
    MatrixXd tmp_poly_6 = (0.5*v4);
    tmp_poly_6 *= h;
    tmp_poly_6 += (-0.5*v3);
    tmp_poly_6 *= h;
    tmp_poly_6 += (0.5*v2);
    tmp_poly_6 *= h;
    tmp_poly_6 += (-0.5*v1);
    tmp_poly_6 *= h;
    MatrixXd tmp_poly_7 = (-5.0*v4);
    tmp_poly_7 *= h;
    tmp_poly_7 += (3.0*v3);
    tmp_poly_7 *= h;
    tmp_poly_7 += (-1.5*v2);
    tmp_poly_7 *= h;
    tmp_poly_7 += (0.5*v1);
    MatrixXd tmp_poly_8 = (0.5*v4);
    tmp_poly_8 *= h;
    tmp_poly_8 += (-0.5*v3);
    tmp_poly_8 *= h;
    tmp_poly_8 += (0.5*v2);
    tmp_poly_8 *= h;
    tmp_poly_8 += (-0.5*v1);
    tmp_poly_8 *= h;
    tDelta[1][2] = {tmp_poly_6, zero, tmp_poly_7, tmp_poly_8}; 
    MatrixXd tmp_poly_9 = (-5.0*v4);
    tmp_poly_9 *= h;
    tmp_poly_9 += (3.0*v3);
    tmp_poly_9 *= h;
    tmp_poly_9 += (-1.5*v2);
    tmp_poly_9 *= h;
    tmp_poly_9 += (0.5*v1);
    MatrixXd tmp_sot_11 = (0.125*v1_v3);
    tmp_sot_11 += (-0.125*v4_v0);
    tmp_sot_11 += (0.125*v0_v4);
    tmp_sot_11 += (0.125*v3_v1);
    tmp_sot_11 += (0.125*v2_v2);
    MatrixXd tmp_sot_12 = (-0.125*v2_v1);
    tmp_sot_12 += (0.125*v3_v0);
    tmp_sot_12 += (-0.125*v1_v2);
    tmp_sot_12 += (-0.125*v0_v3);
    MatrixXd tmp_sot_13 = (0.125*v0_v2);
    tmp_sot_13 += (0.125*v1_v1);
    tmp_sot_13 += (22.5*v4);
    tmp_sot_13 += (-0.125*v2_v0);
    MatrixXd tmp_sot_14 = (-7.5*v3);
    tmp_sot_14 += (0.125*v1_v0);
    tmp_sot_14 += (-0.125*v0_v1);
    MatrixXd tmp_poly_10 = tmp_sot_11;
    tmp_poly_10 *= h;
    tmp_poly_10 += tmp_sot_12;
    tmp_poly_10 *= h;
    tmp_poly_10 += tmp_sot_13;
    tmp_poly_10 *= h;
    tmp_poly_10 += tmp_sot_14;
    tmp_poly_10 *= h;
    tmp_poly_10 += (1.5*v2);
    MatrixXd tmp_poly_15 = (-5.0*v4);
    tmp_poly_15 *= h;
    tmp_poly_15 += (3.0*v3);
    tmp_poly_15 *= h;
    tmp_poly_15 += (-1.5*v2);
    tmp_poly_15 *= h;
    tmp_poly_15 += (0.5*v1);
    tDelta[1][3] = {tmp_poly_9, zero, tmp_poly_10, tmp_poly_15}; 
    MatrixXd tmp_poly_16 = (15.0*v4);
    tmp_poly_16 *= h;
    tmp_poly_16 += (-5.0*v3);
    tmp_poly_16 *= h;
    tmp_poly_16 += v2;
    MatrixXd tmp_sot_18 = (-0.6666666666666666*v1_v3);
    tmp_sot_18 += (0.8333333333333334*v4_v0);
    tmp_sot_18 += (-0.8333333333333334*v0_v4);
    tmp_sot_18 += (-1.0833333333333333*v3_v1);
    tmp_sot_18 += (-0.75*v2_v2);
    MatrixXd tmp_sot_19 = (0.5833333333333334*v2_v1);
    tmp_sot_19 += (-0.5*v3_v0);
    tmp_sot_19 += (0.4166666666666667*v1_v2);
    tmp_sot_19 += (0.5*v0_v3);
    MatrixXd tmp_sot_20 = (-0.25*v0_v2);
    tmp_sot_20 += (-0.25*v1_v1);
    tmp_sot_20 += (-35.0*v4);
    tmp_sot_20 += (0.25*v2_v0);
    MatrixXd tmp_sot_21 = (5.0*v3);
    tmp_sot_21 += (-0.08333333333333333*v1_v0);
    tmp_sot_21 += (0.08333333333333333*v0_v1);
    MatrixXd tmp_poly_17 = tmp_sot_18;
    tmp_poly_17 *= h;
    tmp_poly_17 += tmp_sot_19;
    tmp_poly_17 *= h;
    tmp_poly_17 += tmp_sot_20;
    tmp_poly_17 *= h;
    tmp_poly_17 += tmp_sot_21;
    MatrixXd tmp_poly_22 = (15.0*v4);
    tmp_poly_22 *= h;
    tmp_poly_22 += (-5.0*v3);
    tmp_poly_22 *= h;
    tmp_poly_22 += v2;
    tDelta[1][4] = {tmp_poly_16, zero, tmp_poly_17, tmp_poly_22}; 
    MatrixXd tmp_poly_23 = (-17.5*v4);
    tmp_poly_23 *= h;
    tmp_poly_23 += (2.5*v3);
    MatrixXd tmp_sot_25 = (1.375*v1_v3);
    tmp_sot_25 += (-1.875*v4_v0);
    tmp_sot_25 += (1.875*v0_v4);
    tmp_sot_25 += (2.625*v3_v1);
    tmp_sot_25 += (1.625*v2_v2);
    MatrixXd tmp_sot_26 = (-0.75*v2_v1);
    tmp_sot_26 += (0.625*v3_v0);
    tmp_sot_26 += (-0.5*v1_v2);
    tmp_sot_26 += (-0.625*v0_v3);
    MatrixXd tmp_sot_27 = (0.125*v0_v2);
    tmp_sot_27 += (0.125*v1_v1);
    tmp_sot_27 += (17.5*v4);
    tmp_sot_27 += (-0.125*v2_v0);
    MatrixXd tmp_poly_24 = tmp_sot_25;
    tmp_poly_24 *= h;
    tmp_poly_24 += tmp_sot_26;
    tmp_poly_24 *= h;
    tmp_poly_24 += tmp_sot_27;
    MatrixXd tmp_poly_28 = (-17.5*v4);
    tmp_poly_28 *= h;
    tmp_poly_28 += (2.5*v3);
    tDelta[1][5] = {tmp_poly_23, zero, tmp_poly_24, tmp_poly_28}; 
    MatrixXd tmp_sot_30 = (-1.25*v1_v3);
    tmp_sot_30 += (1.75*v4_v0);
    tmp_sot_30 += (-1.75*v0_v4);
    tmp_sot_30 += (-2.5*v3_v1);
    tmp_sot_30 += (-1.5*v2_v2);
    MatrixXd tmp_sot_31 = (0.3*v2_v1);
    tmp_sot_31 += (-0.25*v3_v0);
    tmp_sot_31 += (0.2*v1_v2);
    tmp_sot_31 += (0.25*v0_v3);
    MatrixXd tmp_poly_29 = tmp_sot_30;
    tmp_poly_29 *= h;
    tmp_poly_29 += tmp_sot_31;
    tDelta[1][6] = {((7.0*v4)), zero, tmp_poly_29, ((7.0*v4))}; 
    MatrixXd tmp_poly_32 = I;
    tmp_poly_32 *= h;
    MatrixXd tmp_sot_34 = (-0.008333333333333333*v1_v2);
    tmp_sot_34 += (0.008333333333333333*v2_v1);
    MatrixXd tmp_sot_35 = (0.041666666666666664*v1_v0);
    tmp_sot_35 += (-0.041666666666666664*v0_v1);
    MatrixXd tmp_poly_33 = (0.5*v6);
    tmp_poly_33 *= h;
    tmp_poly_33 += tmp_sot_34;
    tmp_poly_33 *= h;
    tmp_poly_33 += (0.5*v4);
    tmp_poly_33 *= h;
    tmp_poly_33 += tmp_sot_35;
    tmp_poly_33 *= h;
    tmp_poly_33 += (0.5*v2);
    tmp_poly_33 *= h*h*h;
    tH[1] = {zero, tmp_poly_32, tmp_poly_33, zero}; 
    tDelta[2][0] = {zero, zero, zero, zero}; 
    tDelta[2][1] = {zero, zero, zero, zero}; 
    tDelta[2][2] = {zero, zero, zero, zero}; 
    MatrixXd tmp_poly_36 = (5.0*v4);
    tmp_poly_36 *= h;
    tmp_poly_36 += (-3.0*v3);
    tmp_poly_36 *= h;
    tmp_poly_36 += (1.5*v2);
    tmp_poly_36 *= h;
    tmp_poly_36 += (-0.5*v1);
    MatrixXd tmp_poly_37 = (0.5*v4);
    tmp_poly_37 *= h;
    tmp_poly_37 += (-0.5*v3);
    tmp_poly_37 *= h;
    tmp_poly_37 += (0.5*v2);
    tmp_poly_37 *= h;
    tmp_poly_37 += (-0.5*v1);
    tmp_poly_37 *= h;
    MatrixXd tmp_sot_39 = (0.125*v1_v3);
    tmp_sot_39 += (-0.125*v4_v0);
    tmp_sot_39 += (0.125*v0_v4);
    tmp_sot_39 += (0.125*v3_v1);
    tmp_sot_39 += (0.125*v2_v2);
    MatrixXd tmp_sot_40 = (-0.125*v2_v1);
    tmp_sot_40 += (0.125*v3_v0);
    tmp_sot_40 += (-0.125*v1_v2);
    tmp_sot_40 += (-0.125*v0_v3);
    MatrixXd tmp_sot_41 = (0.125*v0_v2);
    tmp_sot_41 += (0.125*v1_v1);
    tmp_sot_41 += (-22.5*v4);
    tmp_sot_41 += (-0.125*v2_v0);
    MatrixXd tmp_sot_42 = (7.5*v3);
    tmp_sot_42 += (0.125*v1_v0);
    tmp_sot_42 += (-0.125*v0_v1);
    MatrixXd tmp_poly_38 = tmp_sot_39;
    tmp_poly_38 *= h;
    tmp_poly_38 += tmp_sot_40;
    tmp_poly_38 *= h;
    tmp_poly_38 += tmp_sot_41;
    tmp_poly_38 *= h;
    tmp_poly_38 += tmp_sot_42;
    tmp_poly_38 *= h;
    tmp_poly_38 += (-1.5*v2);
    MatrixXd tmp_poly_43 = (-5.0*v4);
    tmp_poly_43 *= h;
    tmp_poly_43 += (3.0*v3);
    tmp_poly_43 *= h;
    tmp_poly_43 += (-1.5*v2);
    tmp_poly_43 *= h;
    tmp_poly_43 += (0.5*v1);
    tDelta[2][3] = {tmp_poly_36, tmp_poly_37, tmp_poly_38, tmp_poly_43}; 
    MatrixXd tmp_sot_45 = (-0.125*v2_v1);
    tmp_sot_45 += (0.125*v3_v0);
    tmp_sot_45 += (-0.125*v1_v2);
    tmp_sot_45 += (-0.125*v0_v3);
    MatrixXd tmp_sot_46 = (0.125*v0_v2);
    tmp_sot_46 += (0.125*v1_v1);
    tmp_sot_46 += (-22.5*v4);
    tmp_sot_46 += (-0.125*v2_v0);
    MatrixXd tmp_sot_47 = (7.5*v3);
    tmp_sot_47 += (0.125*v1_v0);
    tmp_sot_47 += (-0.125*v0_v1);
    MatrixXd tmp_poly_44 = tmp_sot_45;
    tmp_poly_44 *= h;
    tmp_poly_44 += tmp_sot_46;
    tmp_poly_44 *= h;
    tmp_poly_44 += tmp_sot_47;
    tmp_poly_44 *= h;
    tmp_poly_44 += (-1.5*v2);
    MatrixXd tmp_poly_48 = (-5.0*v4);
    tmp_poly_48 *= h;
    tmp_poly_48 += (3.0*v3);
    tmp_poly_48 *= h;
    tmp_poly_48 += (-1.5*v2);
    tmp_poly_48 *= h;
    tmp_poly_48 += (0.5*v1);
    MatrixXd tmp_sot_50 = (-0.25*v1_v3);
    tmp_sot_50 += (-1.5*v3_v1);
    tmp_sot_50 += (-0.75*v2_v2);
    MatrixXd tmp_sot_51 = (0.75*v2_v1);
    tmp_sot_51 += (0.25*v1_v2);
    MatrixXd tmp_sot_52 = (-0.25*v1_v1);
    tmp_sot_52 += (52.5*v4);
    MatrixXd tmp_poly_49 = tmp_sot_50;
    tmp_poly_49 *= h;
    tmp_poly_49 += tmp_sot_51;
    tmp_poly_49 *= h;
    tmp_poly_49 += tmp_sot_52;
    tmp_poly_49 *= h;
    tmp_poly_49 += (-7.5*v3);
    MatrixXd tmp_sot_54 = (-0.125*v2_v1);
    tmp_sot_54 += (0.125*v3_v0);
    tmp_sot_54 += (-0.125*v1_v2);
    tmp_sot_54 += (-0.125*v0_v3);
    MatrixXd tmp_sot_55 = (0.125*v0_v2);
    tmp_sot_55 += (0.125*v1_v1);
    tmp_sot_55 += (22.5*v4);
    tmp_sot_55 += (-0.125*v2_v0);
    MatrixXd tmp_sot_56 = (-7.5*v3);
    tmp_sot_56 += (0.125*v1_v0);
    tmp_sot_56 += (-0.125*v0_v1);
    MatrixXd tmp_poly_53 = tmp_sot_54;
    tmp_poly_53 *= h;
    tmp_poly_53 += tmp_sot_55;
    tmp_poly_53 *= h;
    tmp_poly_53 += tmp_sot_56;
    tmp_poly_53 *= h;
    tmp_poly_53 += (1.5*v2);
    tDelta[2][4] = {tmp_poly_44, tmp_poly_48, tmp_poly_49, tmp_poly_53}; 
    MatrixXd tmp_sot_58 = (0.5833333333333334*v2_v1);
    tmp_sot_58 += (-0.5*v3_v0);
    tmp_sot_58 += (0.4166666666666667*v1_v2);
    tmp_sot_58 += (0.5*v0_v3);
    MatrixXd tmp_sot_59 = (-0.25*v0_v2);
    tmp_sot_59 += (-0.25*v1_v1);
    tmp_sot_59 += (35.0*v4);
    tmp_sot_59 += (0.25*v2_v0);
    MatrixXd tmp_sot_60 = (-5.0*v3);
    tmp_sot_60 += (-0.08333333333333333*v1_v0);
    tmp_sot_60 += (0.08333333333333333*v0_v1);
    MatrixXd tmp_poly_57 = tmp_sot_58;
    tmp_poly_57 *= h;
    tmp_poly_57 += tmp_sot_59;
    tmp_poly_57 *= h;
    tmp_poly_57 += tmp_sot_60;
    MatrixXd tmp_poly_61 = (15.0*v4);
    tmp_poly_61 *= h;
    tmp_poly_61 += (-5.0*v3);
    tmp_poly_61 *= h;
    tmp_poly_61 += v2;
    MatrixXd tmp_sot_63 = (0.020833333333333332*v1_v0_v1);
    tmp_sot_63 += (0.020833333333333332*v0_v0_v2);
    tmp_sot_63 += (0.5*v1_v3);
    tmp_sot_63 += (0.020833333333333332*v0_v1_v1);
    tmp_sot_63 += (-0.041666666666666664*v1_v1_v0);
    tmp_sot_63 += (-0.041666666666666664*v0_v2_v0);
    tmp_sot_63 += (0.020833333333333332*v2_v0_v0);
    tmp_sot_63 += (4.25*v3_v1);
    tmp_sot_63 += (1.5*v2_v2);
    MatrixXd tmp_sot_64 = (-1.0*v2_v1);
    tmp_sot_64 += (-0.020833333333333332*v1_v0_v0);
    tmp_sot_64 += (0.041666666666666664*v0_v1_v0);
    tmp_sot_64 += (-0.25*v1_v2);
    tmp_sot_64 += (-0.020833333333333332*v0_v0_v1);
    MatrixXd tmp_sot_65 = (0.08333333333333333*v1_v1);
    tmp_sot_65 += (-35.0*v4);
    MatrixXd tmp_poly_62 = tmp_sot_63;
    tmp_poly_62 *= h;
    tmp_poly_62 += tmp_sot_64;
    tmp_poly_62 *= h;
    tmp_poly_62 += tmp_sot_65;
    MatrixXd tmp_sot_67 = (0.5833333333333334*v2_v1);
    tmp_sot_67 += (-0.5*v3_v0);
    tmp_sot_67 += (0.4166666666666667*v1_v2);
    tmp_sot_67 += (0.5*v0_v3);
    MatrixXd tmp_sot_68 = (-0.25*v0_v2);
    tmp_sot_68 += (-0.25*v1_v1);
    tmp_sot_68 += (-35.0*v4);
    tmp_sot_68 += (0.25*v2_v0);
    MatrixXd tmp_sot_69 = (5.0*v3);
    tmp_sot_69 += (-0.08333333333333333*v1_v0);
    tmp_sot_69 += (0.08333333333333333*v0_v1);
    MatrixXd tmp_poly_66 = tmp_sot_67;
    tmp_poly_66 *= h;
    tmp_poly_66 += tmp_sot_68;
    tmp_poly_66 *= h;
    tmp_poly_66 += tmp_sot_69;
    tDelta[2][5] = {tmp_poly_57, tmp_poly_61, tmp_poly_62, tmp_poly_66}; 
    MatrixXd tmp_sot_71 = (-0.75*v2_v1);
    tmp_sot_71 += (0.625*v3_v0);
    tmp_sot_71 += (-0.5*v1_v2);
    tmp_sot_71 += (-0.625*v0_v3);
    MatrixXd tmp_sot_72 = (0.125*v0_v2);
    tmp_sot_72 += (0.125*v1_v1);
    tmp_sot_72 += (-17.5*v4);
    tmp_sot_72 += (-0.125*v2_v0);
    MatrixXd tmp_poly_70 = tmp_sot_71;
    tmp_poly_70 *= h;
    tmp_poly_70 += tmp_sot_72;
    MatrixXd tmp_poly_73 = (-17.5*v4);
    tmp_poly_73 *= h;
    tmp_poly_73 += (2.5*v3);
    MatrixXd tmp_sot_75 = (-0.041666666666666664*v1_v0_v1);
    tmp_sot_75 += (-0.03125*v0_v0_v2);
    tmp_sot_75 += (-0.625*v1_v3);
    tmp_sot_75 += (-0.03125*v0_v1_v1);
    tmp_sot_75 += (0.07291666666666667*v1_v1_v0);
    tmp_sot_75 += (0.0625*v0_v2_v0);
    tmp_sot_75 += (-0.03125*v2_v0_v0);
    tmp_sot_75 += (-4.375*v3_v1);
    tmp_sot_75 += (-1.5*v2_v2);
    MatrixXd tmp_sot_76 = (0.375*v2_v1);
    tmp_sot_76 += (0.010416666666666666*v1_v0_v0);
    tmp_sot_76 += (-0.020833333333333332*v0_v1_v0);
    tmp_sot_76 += (0.125*v1_v2);
    tmp_sot_76 += (0.010416666666666666*v0_v0_v1);
    MatrixXd tmp_poly_74 = tmp_sot_75;
    tmp_poly_74 *= h;
    tmp_poly_74 += tmp_sot_76;
    MatrixXd tmp_sot_78 = (-0.75*v2_v1);
    tmp_sot_78 += (0.625*v3_v0);
    tmp_sot_78 += (-0.5*v1_v2);
    tmp_sot_78 += (-0.625*v0_v3);
    MatrixXd tmp_sot_79 = (0.125*v0_v2);
    tmp_sot_79 += (0.125*v1_v1);
    tmp_sot_79 += (17.5*v4);
    tmp_sot_79 += (-0.125*v2_v0);
    MatrixXd tmp_poly_77 = tmp_sot_78;
    tmp_poly_77 *= h;
    tmp_poly_77 += tmp_sot_79;
    tDelta[2][6] = {tmp_poly_70, tmp_poly_73, tmp_poly_74, tmp_poly_77}; 
    MatrixXd tmp_sot_81 = (-0.5*v5);
    tmp_sot_81 += (-0.008333333333333333*v1_v2);
    tmp_sot_81 += (0.008333333333333333*v2_v1);
    MatrixXd tmp_sot_82 = (0.041666666666666664*v1_v0);
    tmp_sot_82 += (-0.5*v3);
    tmp_sot_82 += (-0.041666666666666664*v0_v1);
    MatrixXd tmp_poly_80 = tmp_sot_81;
    tmp_poly_80 *= h*h;
    tmp_poly_80 += tmp_sot_82;
    tmp_poly_80 *= h*h;
    tmp_poly_80 += (-0.5*v1);
    tmp_poly_80 *= h*h*h;
    MatrixXd tmp_sot_84 = (-0.004166666666666667*v1_v0_v1);
    tmp_sot_84 += (0.0020833333333333333*v0_v1_v1);
    tmp_sot_84 += (0.0020833333333333333*v0_v0_v2);
    tmp_sot_84 += (0.0020833333333333333*v1_v1_v0);
    tmp_sot_84 += (-0.025*v2_v2);
    tmp_sot_84 += (0.125*v0_v4);
    tmp_sot_84 += (-0.125*v4_v0);
    tmp_sot_84 += (-10.5*v6);
    tmp_sot_84 += (0.0020833333333333333*v2_v0_v0);
    tmp_sot_84 += (-0.004166666666666667*v0_v2_v0);
    MatrixXd tmp_sot_85 = (0.125*v3_v0);
    tmp_sot_85 += (-0.125*v0_v3);
    tmp_sot_85 += (-0.010416666666666666*v1_v0_v0);
    tmp_sot_85 += (0.020833333333333332*v0_v1_v0);
    tmp_sot_85 += (-0.010416666666666666*v0_v0_v1);
    MatrixXd tmp_sot_86 = (-0.125*v2_v0);
    tmp_sot_86 += (-0.041666666666666664*v1_v1);
    tmp_sot_86 += (0.125*v0_v2);
    tmp_sot_86 += (-5.0*v4);
    MatrixXd tmp_sot_87 = (0.125*v1_v0);
    tmp_sot_87 += (-0.125*v0_v1);
    MatrixXd tmp_poly_83 = tmp_sot_84;
    tmp_poly_83 *= h;
    tmp_poly_83 += tmp_sot_85;
    tmp_poly_83 *= h;
    tmp_poly_83 += tmp_sot_86;
    tmp_poly_83 *= h;
    tmp_poly_83 += tmp_sot_87;
    tmp_poly_83 *= h;
    tmp_poly_83 += (-1.5*v2);
    tmp_poly_83 *= h*h*h;
    MatrixXd tmp_sot_89 = (0.5*v5);
    tmp_sot_89 += (-0.008333333333333333*v1_v2);
    tmp_sot_89 += (0.008333333333333333*v2_v1);
    MatrixXd tmp_sot_90 = (0.041666666666666664*v1_v0);
    tmp_sot_90 += (0.5*v3);
    tmp_sot_90 += (-0.041666666666666664*v0_v1);
    MatrixXd tmp_poly_88 = tmp_sot_89;
    tmp_poly_88 *= h*h;
    tmp_poly_88 += tmp_sot_90;
    tmp_poly_88 *= h*h;
    tmp_poly_88 += (0.5*v1);
    tmp_poly_88 *= h*h*h;
    tH[2] = {tmp_poly_80, zero, tmp_poly_83, tmp_poly_88}; 
    MatrixXd tmp_sot_92 = (7.0*v5);
    tmp_sot_92 += (0.125*v3_v0);
    tmp_sot_92 += (-0.125*v0_v3);
    tmp_sot_92 += (-0.010416666666666666*v1_v0_v0);
    tmp_sot_92 += (0.020833333333333332*v0_v1_v0);
    tmp_sot_92 += (-0.010416666666666666*v0_v0_v1);
    tmp_sot_92 += (-0.008333333333333333*v1_v2);
    tmp_sot_92 += (0.008333333333333333*v2_v1);
    MatrixXd tmp_sot_93 = (-0.125*v2_v0);
    tmp_sot_93 += (-0.041666666666666664*v1_v1);
    tmp_sot_93 += (0.125*v0_v2);
    MatrixXd tmp_sot_94 = (0.16666666666666666*v1_v0);
    tmp_sot_94 += (2.5*v3);
    tmp_sot_94 += (-0.16666666666666666*v0_v1);
    MatrixXd tmp_poly_91 = tmp_sot_92;
    tmp_poly_91 *= h;
    tmp_poly_91 += tmp_sot_93;
    tmp_poly_91 *= h;
    tmp_poly_91 += tmp_sot_94;
    tmp_poly_91 *= h*h*h*h*h;
    MatrixXd tmp_sot_96 = (0.041666666666666664*v1_v0);
    tmp_sot_96 += (-0.041666666666666664*v0_v1);
    MatrixXd tmp_poly_95 = (-0.5*v4);
    tmp_poly_95 *= h;
    tmp_poly_95 += tmp_sot_96;
    tmp_poly_95 *= h;
    tmp_poly_95 += (-0.5*v2);
    tmp_poly_95 *= h*h*h*h*h;
    MatrixXd tmp_sot_98 = (-0.025*v1_v0_v1);
    tmp_sot_98 += (0.0020833333333333333*v0_v1_v1);
    tmp_sot_98 += (-0.25*v3_v1);
    tmp_sot_98 += (0.03333333333333333*v0_v0_v2);
    tmp_sot_98 += (0.022916666666666665*v1_v1_v0);
    tmp_sot_98 += (-0.15*v2_v2);
    tmp_sot_98 += (-1.25*v0_v4);
    tmp_sot_98 += (1.25*v4_v0);
    tmp_sot_98 += (94.5*v6);
    tmp_sot_98 += (0.03333333333333333*v2_v0_v0);
    tmp_sot_98 += (-0.06666666666666667*v0_v2_v0);
    tmp_sot_98 += (-0.25*v1_v3);
    MatrixXd tmp_sot_99 = (-0.625*v3_v0);
    tmp_sot_99 += (0.625*v0_v3);
    tmp_sot_99 += (-0.03125*v1_v0_v0);
    tmp_sot_99 += (0.0625*v0_v1_v0);
    tmp_sot_99 += (-0.03125*v0_v0_v1);
    tmp_sot_99 += (0.125*v1_v2);
    tmp_sot_99 += (-0.125*v2_v1);
    MatrixXd tmp_sot_100 = (0.375*v2_v0);
    tmp_sot_100 += (-0.2916666666666667*v1_v1);
    tmp_sot_100 += (-0.375*v0_v2);
    tmp_sot_100 += (17.5*v4);
    MatrixXd tmp_poly_97 = tmp_sot_98;
    tmp_poly_97 *= h;
    tmp_poly_97 += tmp_sot_99;
    tmp_poly_97 *= h;
    tmp_poly_97 += tmp_sot_100;
    tmp_poly_97 *= h*h*h*h*h;
    MatrixXd tmp_sot_102 = (-7.0*v5);
    tmp_sot_102 += (-0.125*v3_v0);
    tmp_sot_102 += (0.125*v0_v3);
    tmp_sot_102 += (-0.010416666666666666*v1_v0_v0);
    tmp_sot_102 += (0.020833333333333332*v0_v1_v0);
    tmp_sot_102 += (-0.010416666666666666*v0_v0_v1);
    tmp_sot_102 += (-0.008333333333333333*v1_v2);
    tmp_sot_102 += (0.008333333333333333*v2_v1);
    MatrixXd tmp_sot_103 = (0.125*v2_v0);
    tmp_sot_103 += (-0.041666666666666664*v1_v1);
    tmp_sot_103 += (-0.125*v0_v2);
    MatrixXd tmp_sot_104 = (-0.08333333333333333*v1_v0);
    tmp_sot_104 += (-2.5*v3);
    tmp_sot_104 += (0.08333333333333333*v0_v1);
    MatrixXd tmp_poly_101 = tmp_sot_102;
    tmp_poly_101 *= h;
    tmp_poly_101 += tmp_sot_103;
    tmp_poly_101 *= h;
    tmp_poly_101 += tmp_sot_104;
    tmp_poly_101 *= h*h*h*h*h;
    tH[3] = {tmp_poly_91, tmp_poly_95, tmp_poly_97, tmp_poly_101}; 
    MatrixXd tmp_sot_106 = (-31.5*v5);
    tmp_sot_106 += (-0.75*v3_v0);
    tmp_sot_106 += (0.75*v0_v3);
    tmp_sot_106 += (-0.03125*v1_v0_v0);
    tmp_sot_106 += (0.0625*v0_v1_v0);
    tmp_sot_106 += (-0.03125*v0_v0_v1);
    tmp_sot_106 += (0.225*v1_v2);
    tmp_sot_106 += (0.275*v2_v1);
    MatrixXd tmp_poly_105 = tmp_sot_106;
    tmp_poly_105 *= h*h*h*h*h*h*h;
    MatrixXd tmp_sot_108 = (0.125*v2_v0);
    tmp_sot_108 += (-0.041666666666666664*v1_v1);
    tmp_sot_108 += (-0.125*v0_v2);
    tmp_sot_108 += (3.5*v4);
    MatrixXd tmp_poly_107 = tmp_sot_108;
    tmp_poly_107 *= h*h*h*h*h*h*h;
    MatrixXd tmp_sot_110 = (-0.05416666666666667*v1_v0_v1);
    tmp_sot_110 += (-0.04583333333333333*v0_v1_v1);
    tmp_sot_110 += (2.0*v3_v1);
    tmp_sot_110 += (-0.05625*v0_v0_v2);
    tmp_sot_110 += (0.1*v1_v1_v0);
    tmp_sot_110 += (1.425*v2_v2);
    tmp_sot_110 += (4.375*v0_v4);
    tmp_sot_110 += (-4.375*v4_v0);
    tmp_sot_110 += (-346.5*v6);
    tmp_sot_110 += (-0.05625*v2_v0_v0);
    tmp_sot_110 += (0.1125*v0_v2_v0);
    tmp_sot_110 += (2.0*v1_v3);
    MatrixXd tmp_poly_109 = tmp_sot_110;
    tmp_poly_109 *= h*h*h*h*h*h*h;
    MatrixXd tmp_sot_112 = (31.5*v5);
    tmp_sot_112 += (0.5*v3_v0);
    tmp_sot_112 += (-0.5*v0_v3);
    tmp_sot_112 += (0.010416666666666666*v1_v0_v0);
    tmp_sot_112 += (-0.020833333333333332*v0_v1_v0);
    tmp_sot_112 += (0.010416666666666666*v0_v0_v1);
    tmp_sot_112 += (-0.275*v1_v2);
    tmp_sot_112 += (-0.225*v2_v1);
    MatrixXd tmp_poly_111 = tmp_sot_112;
    tmp_poly_111 *= h*h*h*h*h*h*h;
    tH[4] = {tmp_poly_105, tmp_poly_107, tmp_poly_109, tmp_poly_111}; 
}
