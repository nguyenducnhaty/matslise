//
// Created by toon on 6/23/18.
//

#ifndef MATSLISE_FORMULAS_H
#define MATSLISE_FORMULAS_H

// @formatter:off
#define MATSLISE_U {(1), 0, 0, 0, 0, 0, 0, 0, 0, 0,      0, 0, ((((-0.5*v1))+(((0.5*v2))+(((-0.5*v3))+(((0.5*v4))+(((-0.5*v5))+((0.5*v6))*h)*h)*h)*h)*h)*h), (((0.5*v1))+(((-1.5*v2))+(((3.0*v3))+(((-5.0*v4))+(((7.5*v5))+((-10.5*v6))*h)*h)*h)*h)*h), ((v2)+(((-5.0*v3))+(((15.0*v4))+(((-35.0*v5))+((70.0*v6))*h)*h)*h)*h), (((2.5*v3))+(((-17.5*v4))+(((70.0*v5))+((-210.0*v6))*h)*h)*h), (((7.0*v4))+(((-63.0*v5))+((315.0*v6))*h)*h), (((21.0*v5))+((-231.0*v6))*h), ((66.0*v6)), 0,      0, 0, 0, (((-0.5*v1))+(((1.5*v2))+(((-3.0*v3))+(((5.0*v4))+(((-7.5*v5))+((10.5*v6))*h)*h)*h)*h)*h), (((-1.5*v2))+(((7.5*v3))+(((0.125*(v1*v1))+(-22.5*v4))+(((-0.25*(v1*v2))+(52.5*v5))+(((-105.0*v6)+(0.25*(v1*v3))+(0.125*(v2*v2)))+((-0.25*(v2*v3))+(-0.25*(v1*v4)))*h)*h)*h)*h)*h), (((-5.0*v3))+(((-0.25*(v1*v1))+(35.0*v4))+(((v1*v2)+(-140.0*v5))+(((420.0*v6)+(-1.75*(v1*v3))+(-0.75*(v2*v2)))+((2.25*(v2*v3))+(2.75*(v1*v4)))*h)*h)*h)*h), (((0.125*(v1*v1))+(-17.5*v4))+(((-1.25*(v1*v2))+(157.5*v5))+(((-787.5*v6)+(4.0*(v1*v3))+(1.625*(v2*v2)))+((-7.5*(v2*v3))+(-10.0*(v1*v4)))*h)*h)*h), (((0.5*(v1*v2))+(-63.0*v5))+(((693.0*v6)+(-3.75*(v1*v3))+(-1.5*(v2*v2)))+((11.75*(v2*v3))+(16.25*(v1*v4)))*h)*h), (((-231.0*v6)+(1.25*(v1*v3))+(0.5*(v2*v2)))+((-8.75*(v2*v3))+(-12.25*(v1*v4)))*h), ((2.5*(v2*v3))+(3.5*(v1*v4))),      0, 0, 0, 0, 0, (((2.5*v3))+(((0.25*(v1*v1))+(-17.5*v4))+(((-1.0*(v1*v2))+(70.0*v5))+(((-210.0*v6)+(1.75*(v1*v3))+(0.75*(v2*v2)))+((-2.25*(v2*v3))+(-2.75*(v1*v4)))*h)*h)*h)*h), (((-0.2916666666666667*(v1*v1))+(17.5*v4))+(((2.5*(v1*v2))+(-157.5*v5))+(((787.5*v6)+(-7.25*(v1*v3))+(-3.375*(v2*v2)))+((15.0*(v2*v3))+(17.083333333333332*(v1*v4))+(-0.020833333333333332*(v1*v1*v1)))*h)*h)*h), (((-1.5*(v1*v2))+(94.5*v5))+(((-1039.5*v6)+(10.0*(v1*v3))+(4.5*(v2*v2)))+((-34.0*(v2*v3))+(-40.0*(v1*v4))+(0.0625*(v1*v1*v1)))*h)*h), (((462.0*v6)+(-4.5*(v1*v3))+(-1.9*(v2*v2)))+((32.5*(v2*v3))+(40.25*(v1*v4))+(-0.0625*(v1*v1*v1)))*h), ((-11.25*(v2*v3))+(-14.583333333333334*(v1*v4))+(0.020833333333333332*(v1*v1*v1))),      0, 0, 0, 0, 0, 0, 0, (((0.5*(v1*v2))+(-31.5*v5))+(((346.5*v6)+(-3.75*(v1*v3))+(-1.5*(v2*v2)))+((11.75*(v2*v3))+(16.25*(v1*v4))+(-0.0625*(v1*v1*v1)))*h)*h), (((-346.5*v6)+(4.0*(v1*v3))+(1.425*(v2*v2)))+((-26.25*(v2*v3))+(-36.75*(v1*v4))+(0.14583333333333334*(v1*v1*v1)))*h), ((15.0*(v2*v3))+(21.0*(v1*v4))+(-0.08333333333333333*(v1*v1*v1))),      0, 0, 0, 0, 0, 0, 0, 0, 0, ((-3.75*(v2*v3))+(-5.25*(v1*v4))+(0.020833333333333332*(v1*v1*v1))),      0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
#define MATSLISE_UP {0, 0, 0, 0, 0, 0, 0, 0, 0, 0,      0, ((((-0.5*v1))+(((0.5*v2))+(((-0.5*v3))+(((0.5*v4))+(((-0.5*v5))+((0.5*v6))*h)*h)*h)*h)*h)*h), (((0.5*v1))+(((-1.5*v2))+(((3.0*v3))+(((-5.0*v4))+(((7.5*v5))+((-10.5*v6))*h)*h)*h)*h)*h), (((1.5*v2))+(((-7.5*v3))+(((0.125*(v1*v1))+(22.5*v4))+(((-0.25*(v1*v2))+(-52.5*v5))+(((105.0*v6)+(0.25*(v1*v3))+(0.125*(v2*v2)))+(((-0.25*(v2*v3))+(-0.25*(v1*v4)))+((0.125*(v3*v3))+(0.25*(v1*v5))+(0.25*(v2*v4)))*h)*h)*h)*h)*h)*h), (((5.0*v3))+(((-0.25*(v1*v1))+(-35.0*v4))+(((v1*v2)+(140.0*v5))+(((-420.0*v6)+(-1.75*(v1*v3))+(-0.75*(v2*v2)))+(((2.25*(v2*v3))+(2.75*(v1*v4)))+((-1.5*(v3*v3))+(-4.0*(v1*v5))+(-3.25*(v2*v4)))*h)*h)*h)*h)*h), (((0.125*(v1*v1))+(17.5*v4))+(((-1.25*(v1*v2))+(-157.5*v5))+(((787.5*v6)+(4.0*(v1*v3))+(1.625*(v2*v2)))+(((-7.5*(v2*v3))+(-10.0*(v1*v4)))+((7.0*(v3*v3))+(21.25*(v1*v5))+(15.5*(v2*v4)))*h)*h)*h)*h), (((0.5*(v1*v2))+(63.0*v5))+(((-693.0*v6)+(-3.75*(v1*v3))+(-1.5*(v2*v2)))+(((11.75*(v2*v3))+(16.25*(v1*v4)))+((-16.25*(v3*v3))+(-52.5*(v1*v5))+(-36.25*(v2*v4)))*h)*h)*h), (((231.0*v6)+(1.25*(v1*v3))+(0.5*(v2*v2)))+(((-8.75*(v2*v3))+(-12.25*(v1*v4)))+((20.0*(v3*v3))+(66.5*(v1*v5))+(44.75*(v2*v4)))*h)*h), (((2.5*(v2*v3))+(3.5*(v1*v4)))+((-12.5*(v3*v3))+(-42.0*(v1*v5))+(-28.0*(v2*v4)))*h), ((3.125*(v3*v3))+(10.5*(v1*v5))+(7.0*(v2*v4))),      0, 0, 0, (((-1.5*v2))+(((7.5*v3))+(((0.125*(v1*v1))+(-22.5*v4))+(((-0.25*(v1*v2))+(52.5*v5))+(((-105.0*v6)+(0.25*(v1*v3))+(0.125*(v2*v2)))+(((-0.25*(v2*v3))+(-0.25*(v1*v4)))+((0.125*(v3*v3))+(0.25*(v1*v5))+(0.25*(v2*v4)))*h)*h)*h)*h)*h)*h), (((-7.5*v3))+(((-0.25*(v1*v1))+(52.5*v4))+(((v1*v2)+(-210.0*v5))+(((630.0*v6)+(-1.75*(v1*v3))+(-0.75*(v2*v2)))+(((2.25*(v2*v3))+(2.75*(v1*v4)))+((-1.5*(v3*v3))+(-4.0*(v1*v5))+(-3.25*(v2*v4)))*h)*h)*h)*h)*h), (((0.08333333333333333*(v1*v1))+(-35.0*v4))+(((-1.25*(v1*v2))+(315.0*v5))+(((-1575.0*v6)+(4.75*(v1*v3))+(1.5*(v2*v2)))+(((-7.5*(v2*v3))+(-12.916666666666666*(v1*v4))+(-0.020833333333333332*(v1*v1*v1)))+((6.75*(v3*v3))+(28.75*(v1*v5))+(0.0625*(v1*v1*v2))+(17.0*(v2*v4)))*h)*h)*h)*h), (((0.5*(v1*v2))+(-157.5*v5))+(((1732.5*v6)+(-5.0*(v1*v3))+(-1.5*(v2*v2)))+(((13.0*(v2*v3))+(25.0*(v1*v4))+(0.0625*(v1*v1*v1)))+((-17.5*(v3*v3))+(-87.5*(v1*v5))+(-0.3125*(v1*v1*v2))+(-45.0*(v2*v4)))*h)*h)*h), (((-693.0*v6)+(1.75*(v1*v3))+(0.6*(v2*v2)))+(((-11.25*(v2*v3))+(-21.0*(v1*v4))+(-0.0625*(v1*v1*v1)))+((25.5*(v3*v3))+(127.75*(v1*v5))+(0.5625*(v1*v1*v2))+(63.5*(v2*v4)))*h)*h), (((3.75*(v2*v3))+(6.416666666666667*(v1*v4))+(0.020833333333333332*(v1*v1*v1)))+((-18.75*(v3*v3))+(-89.25*(v1*v5))+(-0.4375*(v1*v1*v2))+(-45.5*(v2*v4)))*h), ((5.357142857142857*(v3*v3))+(24.0*(v1*v5))+(0.125*(v1*v1*v2))+(13.0*(v2*v4))),      0, 0, 0, 0, 0, (((-0.2916666666666667*(v1*v1))+(17.5*v4))+(((2.5*(v1*v2))+(-157.5*v5))+(((787.5*v6)+(-7.25*(v1*v3))+(-3.375*(v2*v2)))+(((15.0*(v2*v3))+(17.083333333333332*(v1*v4))+(-0.020833333333333332*(v1*v1*v1)))+((-14.25*(v3*v3))+(-35.0*(v1*v5))+(0.0625*(v1*v1*v2))+(-29.5*(v2*v4)))*h)*h)*h)*h), (((-2.5*(v1*v2))+(157.5*v5))+(((-1732.5*v6)+(16.25*(v1*v3))+(7.5*(v2*v2)))+(((-56.25*(v2*v3))+(-63.75*(v1*v4))+(0.0625*(v1*v1*v1)))+((78.75*(v3*v3))+(192.5*(v1*v5))+(-0.3125*(v1*v1*v2))+(163.75*(v2*v4)))*h)*h)*h), (((1039.5*v6)+(-9.5*(v1*v3))+(-4.275*(v2*v2)))+(((71.25*(v2*v3))+(84.0*(v1*v4))+(-0.041666666666666664*(v1*v1*v1)))+((-163.875*(v3*v3))+(-423.5*(v1*v5))+(0.4791666666666667*(v1*v1*v2))+(-345.25*(v2*v4)))*h)*h), (((-30.0*(v2*v3))+(-37.333333333333336*(v1*v4)))+((150.0*(v3*v3))+(414.75*(v1*v5))+(-0.25*(v1*v1*v2))+(322.0*(v2*v4)))*h), ((-50.892857142857146*(v3*v3))+(-149.25*(v1*v5))+(0.020833333333333332*(v1*v1*v2))+(-111.25*(v2*v4))),      0, 0, 0, 0, 0, 0, 0, (((-346.5*v6)+(4.0*(v1*v3))+(1.425*(v2*v2)))+(((-26.25*(v2*v3))+(-36.75*(v1*v4))+(0.14583333333333334*(v1*v1*v1)))+((59.625*(v3*v3))+(190.75*(v1*v5))+(-1.2083333333333333*(v1*v1*v2))+(135.5*(v2*v4)))*h)*h), (((26.25*(v2*v3))+(36.75*(v1*v4))+(-0.14583333333333334*(v1*v1*v1)))+((-131.25*(v3*v3))+(-409.5*(v1*v5))+(2.5625*(v1*v1*v2))+(-294.0*(v2*v4)))*h), ((76.07142857142857*(v3*v3))+(229.5*(v1*v5))+(-1.35*(v1*v1*v2))+(165.0*(v2*v4))),      0, 0, 0, 0, 0, 0, 0, 0, 0, ((-19.017857142857142*(v3*v3))+(-65.25*(v1*v5))+(0.4625*(v1*v1*v2))+(-41.25*(v2*v4))),      0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
#define MATSLISE_V {0, 0, 0, 0, 0, 0, 0, 0, 0, 0,      0, (1), 0, 0, 0, 0, 0, 0, 0, 0,      0, 0, 0, ((((-0.5*v1))+(((0.5*v2))+(((-0.5*v3))+(((0.5*v4))+(((-0.5*v5))+((0.5*v6))*h)*h)*h)*h)*h)*h), (((0.5*v1))+(((-1.5*v2))+(((3.0*v3))+(((-5.0*v4))+(((7.5*v5))+((-10.5*v6))*h)*h)*h)*h)*h), ((v2)+(((-5.0*v3))+(((15.0*v4))+(((-35.0*v5))+((70.0*v6))*h)*h)*h)*h), (((2.5*v3))+(((-17.5*v4))+(((70.0*v5))+((-210.0*v6))*h)*h)*h), (((7.0*v4))+(((-63.0*v5))+((315.0*v6))*h)*h), (((21.0*v5))+((-231.0*v6))*h), ((66.0*v6)),      0, 0, 0, 0, 0, (((-0.5*v2))+(((2.5*v3))+(((0.125*(v1*v1))+(-7.5*v4))+(((-0.25*(v1*v2))+(17.5*v5))+((-35.0*v6)+(0.25*(v1*v3))+(0.125*(v2*v2)))*h)*h)*h)*h), (((-2.5*v3))+(((-0.25*(v1*v1))+(17.5*v4))+(((v1*v2)+(-70.0*v5))+((210.0*v6)+(-1.75*(v1*v3))+(-0.75*(v2*v2)))*h)*h)*h), (((0.125*(v1*v1))+(-10.5*v4))+(((-1.25*(v1*v2))+(94.5*v5))+((-472.5*v6)+(4.0*(v1*v3))+(1.625*(v2*v2)))*h)*h), (((0.5*(v1*v2))+(-42.0*v5))+((462.0*v6)+(-3.75*(v1*v3))+(-1.5*(v2*v2)))*h), ((-165.0*v6)+(1.25*(v1*v3))+(0.5*(v2*v2))),      0, 0, 0, 0, 0, 0, 0, (((-0.041666666666666664*(v1*v1))+(3.5*v4))+(((0.5*(v1*v2))+(-31.5*v5))+((157.5*v6)+(-1.75*(v1*v3))+(-0.625*(v2*v2)))*h)*h), (((-0.5*(v1*v2))+(31.5*v5))+((-346.5*v6)+(3.75*(v1*v3))+(1.5*(v2*v2)))*h), ((198.0*v6)+(-2.0*(v1*v3))+(-0.9*(v2*v2))),      0, 0, 0, 0, 0, 0, 0, 0, 0, ((-49.5*v6)+(0.5*(v1*v3))+(0.225*(v2*v2))),      0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
#define MATSLISE_VP {(1), 0, 0, 0, 0, 0, 0, 0, 0, 0,      0, 0, ((((-0.5*v1))+(((0.5*v2))+(((-0.5*v3))+(((0.5*v4))+(((-0.5*v5))+((0.5*v6))*h)*h)*h)*h)*h)*h), (((0.5*v1))+(((-1.5*v2))+(((3.0*v3))+(((-5.0*v4))+(((7.5*v5))+((-10.5*v6))*h)*h)*h)*h)*h), ((v2)+(((-5.0*v3))+(((15.0*v4))+(((-35.0*v5))+((70.0*v6))*h)*h)*h)*h), (((2.5*v3))+(((-17.5*v4))+(((70.0*v5))+((-210.0*v6))*h)*h)*h), (((7.0*v4))+(((-63.0*v5))+((315.0*v6))*h)*h), (((21.0*v5))+((-231.0*v6))*h), ((66.0*v6)), 0,      0, 0, 0, (((0.5*v1))+(((-1.5*v2))+(((3.0*v3))+(((-5.0*v4))+(((7.5*v5))+((-10.5*v6))*h)*h)*h)*h)*h), (((1.5*v2))+(((-7.5*v3))+(((0.125*(v1*v1))+(22.5*v4))+(((-0.25*(v1*v2))+(-52.5*v5))+(((105.0*v6)+(0.25*(v1*v3))+(0.125*(v2*v2)))+((-0.25*(v2*v3))+(-0.25*(v1*v4)))*h)*h)*h)*h)*h), (((5.0*v3))+(((-0.25*(v1*v1))+(-35.0*v4))+(((v1*v2)+(140.0*v5))+(((-420.0*v6)+(-1.75*(v1*v3))+(-0.75*(v2*v2)))+((2.25*(v2*v3))+(2.75*(v1*v4)))*h)*h)*h)*h), (((0.125*(v1*v1))+(17.5*v4))+(((-1.25*(v1*v2))+(-157.5*v5))+(((787.5*v6)+(4.0*(v1*v3))+(1.625*(v2*v2)))+((-7.5*(v2*v3))+(-10.0*(v1*v4)))*h)*h)*h), (((0.5*(v1*v2))+(63.0*v5))+(((-693.0*v6)+(-3.75*(v1*v3))+(-1.5*(v2*v2)))+((11.75*(v2*v3))+(16.25*(v1*v4)))*h)*h), (((231.0*v6)+(1.25*(v1*v3))+(0.5*(v2*v2)))+((-8.75*(v2*v3))+(-12.25*(v1*v4)))*h), ((2.5*(v2*v3))+(3.5*(v1*v4))),      0, 0, 0, 0, 0, (((-2.5*v3))+(((-0.25*(v1*v1))+(17.5*v4))+(((v1*v2)+(-70.0*v5))+(((210.0*v6)+(-1.75*(v1*v3))+(-0.75*(v2*v2)))+((2.25*(v2*v3))+(2.75*(v1*v4)))*h)*h)*h)*h), (((0.20833333333333334*(v1*v1))+(-17.5*v4))+(((-2.0*(v1*v2))+(157.5*v5))+(((-787.5*v6)+(6.25*(v1*v3))+(2.625*(v2*v2)))+((-12.0*(v2*v3))+(-15.416666666666666*(v1*v4))+(-0.020833333333333332*(v1*v1*v1)))*h)*h)*h), (((v1*v2)+(-94.5*v5))+(((1039.5*v6)+(-7.5*(v1*v3))+(-3.0*(v2*v2)))+((23.5*(v2*v3))+(32.5*(v1*v4))+(0.0625*(v1*v1*v1)))*h)*h), (((-462.0*v6)+(3.0*(v1*v3))+(1.1*(v2*v2)))+((-20.0*(v2*v3))+(-29.75*(v1*v4))+(-0.0625*(v1*v1*v1)))*h), ((6.25*(v2*v3))+(9.916666666666666*(v1*v4))+(0.020833333333333332*(v1*v1*v1))),      0, 0, 0, 0, 0, 0, 0, (((-0.5*(v1*v2))+(31.5*v5))+(((-346.5*v6)+(3.75*(v1*v3))+(1.5*(v2*v2)))+((-11.75*(v2*v3))+(-16.25*(v1*v4))+(0.0625*(v1*v1*v1)))*h)*h), (((346.5*v6)+(-3.5*(v1*v3))+(-1.575*(v2*v2)))+((26.25*(v2*v3))+(33.25*(v1*v4))+(-0.10416666666666667*(v1*v1*v1)))*h), ((-15.0*(v2*v3))+(-17.5*(v1*v4))+(0.041666666666666664*(v1*v1*v1))),      0, 0, 0, 0, 0, 0, 0, 0, 0, ((3.75*(v2*v3))+(5.25*(v1*v4))+(-0.020833333333333332*(v1*v1*v1))),      0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
// @formatter:on

#endif //MATSLISE_FORMULAS_H
